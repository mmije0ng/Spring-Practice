name: mijeong-test server for CI/CD

on:
  push:
    branches: [ master ]

# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
#  CODE_DEPLOY_APPLICATION_NAME: mijeong-test-codedeploy-app
#  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: mijeong-test-codedeploy-group

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

#      - uses: actions/checkout@v2
#      - run: touch ./src/main/resources/application-prod.yml
#      - run: echo "${{secrets.YML_PROD}}" > ./src/main/resources/application-prod.yml
#      - uses: actions/upload-artifact@v2
#        with:
#          name: application-prod.yml
#          path: ./src/main/resources/application-prod.yml

#      # 환경별 yml 파일 생성 - prod
#      - name: Make application-prod.yml
#        run: |
#          if [ ! -d "src/main/resources" ]; then
#            mkdir -p src/main/resources
#          fi
#          touch ./application-prod.yml
#          echo "${{ secrets.YML_PROD }}" | base64 --decode > src/main/resources/application-prod.yml
#          find src
#        shell: bash

      - name: Display application-prod.yml content
        run: cat src/main/resources/application-prod.yml

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      #gradle build
      - name: Build with Gradle
        run: ./gradlew clean build

      # 디렉토리 생성
      - name: Make Directory
        run: mkdir -p deploy

      # Jar 파일 복사
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy

      # appspec.yml 파일 복사
      - name: Copy appspec.yml
        run: cp appspec.yml ./deploy

      - name: Make zip file
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      # AWS 사용자 정보 입력
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # S3에 zip 파일 업로드
      - name: Upload to S3
        run: aws s3 cp ./$GITHUB_SHA.zip s3://${{ secrets.S3_BUCKET_NAME }}/deploy/$GITHUB_SHA.zip --region ${{ env.AWS_REGION }}

      # S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},key=deploy/$GITHUB_SHA.zip,bundleType=zip

  # 프로젝트 보안 취약점 감지, 보고
  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
